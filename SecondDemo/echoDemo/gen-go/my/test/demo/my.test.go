// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package demo

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Sid
//  - Sname
//  - Ssex
//  - Sage
type Student struct {
  Sid int32 `thrift:"sid,1" db:"sid" json:"sid"`
  Sname string `thrift:"sname,2" db:"sname" json:"sname"`
  Ssex bool `thrift:"ssex,3" db:"ssex" json:"ssex"`
  Sage int16 `thrift:"sage,4" db:"sage" json:"sage"`
}

func NewStudent() *Student {
  return &Student{}
}


func (p *Student) GetSid() int32 {
  return p.Sid
}

func (p *Student) GetSname() string {
  return p.Sname
}

func (p *Student) GetSsex() bool {
  return p.Ssex
}

func (p *Student) GetSage() int16 {
  return p.Sage
}
func (p *Student) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Student)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *Student)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sname = v
}
  return nil
}

func (p *Student)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ssex = v
}
  return nil
}

func (p *Student)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sage = v
}
  return nil
}

func (p *Student) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Student"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Student) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err) }
  return err
}

func (p *Student) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sname: ", p), err) }
  if err := oprot.WriteString(string(p.Sname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sname: ", p), err) }
  return err
}

func (p *Student) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ssex", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssex: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ssex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssex: ", p), err) }
  return err
}

func (p *Student) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sage", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sage: ", p), err) }
  if err := oprot.WriteI16(int16(p.Sage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sage: ", p), err) }
  return err
}

func (p *Student) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Student(%+v)", *p)
}

type ClassMember interface {
  // Parameters:
  //  - CallTime
  List(ctx context.Context, callTime int64) (r []*Student, err error)
  // Parameters:
  //  - S
  Add(ctx context.Context, s *Student) (err error)
  // Parameters:
  //  - CallTime
  //  - Name
  IsNameExist(ctx context.Context, callTime int64, name string) (r bool, err error)
}

type ClassMemberClient struct {
  c thrift.TClient
}

func NewClassMemberClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ClassMemberClient {
  return &ClassMemberClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewClassMemberClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ClassMemberClient {
  return &ClassMemberClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewClassMemberClient(c thrift.TClient) *ClassMemberClient {
  return &ClassMemberClient{
    c: c,
  }
}

func (p *ClassMemberClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - CallTime
func (p *ClassMemberClient) List(ctx context.Context, callTime int64) (r []*Student, err error) {
  var _args0 ClassMemberListArgs
  _args0.CallTime = callTime
  var _result1 ClassMemberListResult
  if err = p.Client_().Call(ctx, "List", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - S
func (p *ClassMemberClient) Add(ctx context.Context, s *Student) (err error) {
  var _args2 ClassMemberAddArgs
  _args2.S = s
  var _result3 ClassMemberAddResult
  if err = p.Client_().Call(ctx, "Add", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - CallTime
//  - Name
func (p *ClassMemberClient) IsNameExist(ctx context.Context, callTime int64, name string) (r bool, err error) {
  var _args4 ClassMemberIsNameExistArgs
  _args4.CallTime = callTime
  _args4.Name = name
  var _result5 ClassMemberIsNameExistResult
  if err = p.Client_().Call(ctx, "IsNameExist", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

type ClassMemberProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ClassMember
}

func (p *ClassMemberProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ClassMemberProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ClassMemberProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewClassMemberProcessor(handler ClassMember) *ClassMemberProcessor {

  self6 := &ClassMemberProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["List"] = &classMemberProcessorList{handler:handler}
  self6.processorMap["Add"] = &classMemberProcessorAdd{handler:handler}
  self6.processorMap["IsNameExist"] = &classMemberProcessorIsNameExist{handler:handler}
return self6
}

func (p *ClassMemberProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type classMemberProcessorList struct {
  handler ClassMember
}

func (p *classMemberProcessorList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ClassMemberListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("List", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ClassMemberListResult{}
var retval []*Student
  var err2 error
  if retval, err2 = p.handler.List(ctx, args.CallTime); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing List: " + err2.Error())
    oprot.WriteMessageBegin("List", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("List", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type classMemberProcessorAdd struct {
  handler ClassMember
}

func (p *classMemberProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ClassMemberAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ClassMemberAddResult{}
  var err2 error
  if err2 = p.handler.Add(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Add: " + err2.Error())
    oprot.WriteMessageBegin("Add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("Add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type classMemberProcessorIsNameExist struct {
  handler ClassMember
}

func (p *classMemberProcessorIsNameExist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ClassMemberIsNameExistArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("IsNameExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ClassMemberIsNameExistResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsNameExist(ctx, args.CallTime, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsNameExist: " + err2.Error())
    oprot.WriteMessageBegin("IsNameExist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("IsNameExist", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CallTime
type ClassMemberListArgs struct {
  CallTime int64 `thrift:"callTime,1" db:"callTime" json:"callTime"`
}

func NewClassMemberListArgs() *ClassMemberListArgs {
  return &ClassMemberListArgs{}
}


func (p *ClassMemberListArgs) GetCallTime() int64 {
  return p.CallTime
}
func (p *ClassMemberListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallTime = v
}
  return nil
}

func (p *ClassMemberListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("List_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callTime: ", p), err) }
  return err
}

func (p *ClassMemberListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ClassMemberListResult struct {
  Success []*Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewClassMemberListResult() *ClassMemberListResult {
  return &ClassMemberListResult{}
}

var ClassMemberListResult_Success_DEFAULT []*Student

func (p *ClassMemberListResult) GetSuccess() []*Student {
  return p.Success
}
func (p *ClassMemberListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ClassMemberListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Student, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &Student{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Success = append(p.Success, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ClassMemberListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("List_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ClassMemberListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberListResult(%+v)", *p)
}

// Attributes:
//  - S
type ClassMemberAddArgs struct {
  S *Student `thrift:"s,1" db:"s" json:"s"`
}

func NewClassMemberAddArgs() *ClassMemberAddArgs {
  return &ClassMemberAddArgs{}
}

var ClassMemberAddArgs_S_DEFAULT *Student
func (p *ClassMemberAddArgs) GetS() *Student {
  if !p.IsSetS() {
    return ClassMemberAddArgs_S_DEFAULT
  }
return p.S
}
func (p *ClassMemberAddArgs) IsSetS() bool {
  return p.S != nil
}

func (p *ClassMemberAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Student{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *ClassMemberAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *ClassMemberAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberAddArgs(%+v)", *p)
}

type ClassMemberAddResult struct {
}

func NewClassMemberAddResult() *ClassMemberAddResult {
  return &ClassMemberAddResult{}
}

func (p *ClassMemberAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberAddResult(%+v)", *p)
}

// Attributes:
//  - CallTime
//  - Name
type ClassMemberIsNameExistArgs struct {
  CallTime int64 `thrift:"callTime,1" db:"callTime" json:"callTime"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewClassMemberIsNameExistArgs() *ClassMemberIsNameExistArgs {
  return &ClassMemberIsNameExistArgs{}
}


func (p *ClassMemberIsNameExistArgs) GetCallTime() int64 {
  return p.CallTime
}

func (p *ClassMemberIsNameExistArgs) GetName() string {
  return p.Name
}
func (p *ClassMemberIsNameExistArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberIsNameExistArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallTime = v
}
  return nil
}

func (p *ClassMemberIsNameExistArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ClassMemberIsNameExistArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsNameExist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberIsNameExistArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callTime: ", p), err) }
  return err
}

func (p *ClassMemberIsNameExistArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ClassMemberIsNameExistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberIsNameExistArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ClassMemberIsNameExistResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewClassMemberIsNameExistResult() *ClassMemberIsNameExistResult {
  return &ClassMemberIsNameExistResult{}
}

var ClassMemberIsNameExistResult_Success_DEFAULT bool
func (p *ClassMemberIsNameExistResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ClassMemberIsNameExistResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ClassMemberIsNameExistResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ClassMemberIsNameExistResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClassMemberIsNameExistResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ClassMemberIsNameExistResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsNameExist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClassMemberIsNameExistResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ClassMemberIsNameExistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClassMemberIsNameExistResult(%+v)", *p)
}


